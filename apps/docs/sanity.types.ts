/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type ImageWithCaption = {
  _type: "image-with-caption";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
  caption?: string;
};

export type LiveCodeBlock = {
  _type: "live-code-block";
  code?: Code;
  caption?: string;
};

export type StaticCodeBlock = {
  _type: "static-code-block";
  code?: Code;
  caption?: string;
};

export type Content = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h2" | "h3" | "h4" | "h5" | "blockquote" | "hr";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  _key: string;
} & LiveCodeBlock | {
  _key: string;
} & StaticCodeBlock | {
  _key: string;
} & ImageWithCaption | {
  _key: string;
} & Table>;

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  categoryItems?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "info";
  }>;
};

export type Menu = {
  _id: string;
  _type: "menu";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
};

export type Info = {
  _id: string;
  _type: "info";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  content?: Content;
  resourceLinks?: Array<{
    linkType?: "figma" | "github" | "other";
    url?: string;
    text?: string;
    _type: "resourceLink";
    _key: string;
  }>;
};

export type Component = {
  _id: string;
  _type: "component";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  componentState?: "beta" | "new" | "stable" | "deprecated";
  content?: Content;
  propsComponents?: Array<string>;
  resourceLinks?: Array<{
    linkType?: "figma" | "github" | "other";
    url?: string;
    text?: string;
    _type: "resourceLink";
    _key: string;
  }>;
};

export type SanityVideoMetadataPlayback = {
  _type: "sanity.videoMetadata.playback";
  policy?: string;
};

export type SanityVideoAsset = {
  _id: string;
  _type: "sanity.videoAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  creditLine?: string;
  metadata?: SanityVideoMetadata;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
};

export type SanityVideoMetadata = {
  _type: "sanity.videoMetadata";
  duration?: number;
  framerate?: number;
  aspectRatio?: number;
  hasAudio?: boolean;
  codec?: string;
  bitrate?: number;
};

export type SanityVideo = {
  _type: "sanity.video";
  asset?: unknown;
  media?: unknown;
};

export type Table = {
  _type: "table";
  rows?: Array<{
    _key: string;
  } & TableRow>;
};

export type TableRow = {
  _type: "tableRow";
  cells?: Array<string>;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = ImageWithCaption | LiveCodeBlock | StaticCodeBlock | Content | Category | Menu | Info | Component | SanityVideoMetadataPlayback | SanityVideoAsset | SanityVideoMetadata | SanityVideo | Table | TableRow | Code | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/routes/_docs.tsx
// Variable: NAVIGATION_QUERY
// Query: {  "components": *[_type == "component"]{ _id, name, 'slug': coalesce(slug.current, ''), componentState} | order(name asc),  "menu": *[_type == "menu"][0]{    categories[]->{      title,      "slug": slug.current,      categoryItems[]->{        name,        "slug": slug.current      }    }  }}
export type NAVIGATION_QUERYResult = {
  components: Array<{
    _id: string;
    name: string | null;
    slug: string | "";
    componentState: "beta" | "deprecated" | "new" | "stable" | null;
  }>;
  menu: {
    categories: Array<{
      title: string | null;
      slug: null;
      categoryItems: Array<{
        name: string | null;
        slug: string | null;
      }> | null;
    }> | null;
  } | null;
};

// Source: ./src/routes/_docs/$slug.tsx
// Variable: INFO_QUERY
// Query: *[_type == "info"  && slug.current == $slug][0]{    "content": content[] {      ...,      _type == "image-with-caption" => {        ...,        asset->      }    },    "name": coalesce(name, ''),    resourceLinks,  }
export type INFO_QUERYResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "h4" | "h5" | "hr" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
    _type: "image-with-caption";
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
  } | {
    _key: string;
    _type: "live-code-block";
    code?: Code;
    caption?: string;
  } | {
    _key: string;
    _type: "static-code-block";
    code?: Code;
    caption?: string;
  } | {
    _key: string;
    _type: "table";
    rows?: Array<{
      _key: string;
    } & TableRow>;
  }> | null;
  name: string | "";
  resourceLinks: Array<{
    linkType?: "figma" | "github" | "other";
    url?: string;
    text?: string;
    _type: "resourceLink";
    _key: string;
  }> | null;
} | null;

// Source: ./src/routes/_docs/komponenter/$slug.tsx
// Variable: COMPONENT_QUERY
// Query: *[_type == "component"  && slug.current == $slug][0]{    "content": content[] {      ...,      _type == "image-with-caption" => {        ...,        asset->      }    },    "name": coalesce(name, ''),    propsComponents,    resourceLinks,    componentState,  }
export type COMPONENT_QUERYResult = {
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h2" | "h3" | "h4" | "h5" | "hr" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    _key: string;
    _type: "image-with-caption";
    asset: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    caption?: string;
  } | {
    _key: string;
    _type: "live-code-block";
    code?: Code;
    caption?: string;
  } | {
    _key: string;
    _type: "static-code-block";
    code?: Code;
    caption?: string;
  } | {
    _key: string;
    _type: "table";
    rows?: Array<{
      _key: string;
    } & TableRow>;
  }> | null;
  name: string | "";
  propsComponents: Array<string> | null;
  resourceLinks: Array<{
    linkType?: "figma" | "github" | "other";
    url?: string;
    text?: string;
    _type: "resourceLink";
    _key: string;
  }> | null;
  componentState: "beta" | "deprecated" | "new" | "stable" | null;
} | null;

// Source: ./src/routes/_docs/komponenter/index.tsx
// Variable: COMPONENTS_INDEX_QUERY
// Query: *[_type == "component"]{ _id, name, 'slug': coalesce(slug.current, ''), componentState} | order(name asc)
export type COMPONENTS_INDEX_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: string | "";
  componentState: "beta" | "deprecated" | "new" | "stable" | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "{\n  \"components\": *[_type == \"component\"]{ _id, name, 'slug': coalesce(slug.current, ''), componentState} | order(name asc),\n  \"menu\": *[_type == \"menu\"][0]{\n    categories[]->{\n      title,\n      \"slug\": slug.current,\n      categoryItems[]->{\n        name,\n        \"slug\": slug.current\n      }\n    }\n  }\n}": NAVIGATION_QUERYResult;
    "*[_type == \"info\"\n  && slug.current == $slug][0]{\n    \"content\": content[] {\n      ...,\n      _type == \"image-with-caption\" => {\n        ...,\n        asset->\n      }\n    },\n    \"name\": coalesce(name, ''),\n    resourceLinks,\n  }": INFO_QUERYResult;
    "*[_type == \"component\"\n  && slug.current == $slug][0]{\n    \"content\": content[] {\n      ...,\n      _type == \"image-with-caption\" => {\n        ...,\n        asset->\n      }\n    },\n    \"name\": coalesce(name, ''),\n    propsComponents,\n    resourceLinks,\n    componentState,\n  }": COMPONENT_QUERYResult;
    "*[_type == \"component\"]{ _id, name, 'slug': coalesce(slug.current, ''), componentState} | order(name asc)": COMPONENTS_INDEX_QUERYResult;
  }
}
