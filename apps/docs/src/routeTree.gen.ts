/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DocsRouteImport } from './routes/_docs'
import { Route as DocsIndexRouteImport } from './routes/_docs/index'
import { Route as StudioSplatRouteImport } from './routes/studio/$'
import { Route as ApiHealthRouteImport } from './routes/api/health'
import { Route as DocsSlugRouteImport } from './routes/_docs/$slug'
import { Route as DocsProfilIndexRouteImport } from './routes/_docs/profil/index'
import { Route as DocsKomponenterIndexRouteImport } from './routes/_docs/komponenter/index'
import { Route as DocsProfilIkonerRouteImport } from './routes/_docs/profil/ikoner'
import { Route as DocsProfilFargerRouteImport } from './routes/_docs/profil/farger'
import { Route as DocsKomponenterSlugRouteImport } from './routes/_docs/komponenter/$slug'

const DocsRoute = DocsRouteImport.update({
  id: '/_docs',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsIndexRoute = DocsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRoute,
} as any)
const StudioSplatRoute = StudioSplatRouteImport.update({
  id: '/studio/$',
  path: '/studio/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiHealthRoute = ApiHealthRouteImport.update({
  id: '/api/health',
  path: '/api/health',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsSlugRoute = DocsSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => DocsRoute,
} as any)
const DocsProfilIndexRoute = DocsProfilIndexRouteImport.update({
  id: '/profil/',
  path: '/profil/',
  getParentRoute: () => DocsRoute,
} as any)
const DocsKomponenterIndexRoute = DocsKomponenterIndexRouteImport.update({
  id: '/komponenter/',
  path: '/komponenter/',
  getParentRoute: () => DocsRoute,
} as any)
const DocsProfilIkonerRoute = DocsProfilIkonerRouteImport.update({
  id: '/profil/ikoner',
  path: '/profil/ikoner',
  getParentRoute: () => DocsRoute,
} as any)
const DocsProfilFargerRoute = DocsProfilFargerRouteImport.update({
  id: '/profil/farger',
  path: '/profil/farger',
  getParentRoute: () => DocsRoute,
} as any)
const DocsKomponenterSlugRoute = DocsKomponenterSlugRouteImport.update({
  id: '/komponenter/$slug',
  path: '/komponenter/$slug',
  getParentRoute: () => DocsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/$slug': typeof DocsSlugRoute
  '/api/health': typeof ApiHealthRoute
  '/studio/$': typeof StudioSplatRoute
  '/': typeof DocsIndexRoute
  '/komponenter/$slug': typeof DocsKomponenterSlugRoute
  '/profil/farger': typeof DocsProfilFargerRoute
  '/profil/ikoner': typeof DocsProfilIkonerRoute
  '/komponenter': typeof DocsKomponenterIndexRoute
  '/profil': typeof DocsProfilIndexRoute
}
export interface FileRoutesByTo {
  '/$slug': typeof DocsSlugRoute
  '/api/health': typeof ApiHealthRoute
  '/studio/$': typeof StudioSplatRoute
  '/': typeof DocsIndexRoute
  '/komponenter/$slug': typeof DocsKomponenterSlugRoute
  '/profil/farger': typeof DocsProfilFargerRoute
  '/profil/ikoner': typeof DocsProfilIkonerRoute
  '/komponenter': typeof DocsKomponenterIndexRoute
  '/profil': typeof DocsProfilIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_docs': typeof DocsRouteWithChildren
  '/_docs/$slug': typeof DocsSlugRoute
  '/api/health': typeof ApiHealthRoute
  '/studio/$': typeof StudioSplatRoute
  '/_docs/': typeof DocsIndexRoute
  '/_docs/komponenter/$slug': typeof DocsKomponenterSlugRoute
  '/_docs/profil/farger': typeof DocsProfilFargerRoute
  '/_docs/profil/ikoner': typeof DocsProfilIkonerRoute
  '/_docs/komponenter/': typeof DocsKomponenterIndexRoute
  '/_docs/profil/': typeof DocsProfilIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/$slug'
    | '/api/health'
    | '/studio/$'
    | '/'
    | '/komponenter/$slug'
    | '/profil/farger'
    | '/profil/ikoner'
    | '/komponenter'
    | '/profil'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/$slug'
    | '/api/health'
    | '/studio/$'
    | '/'
    | '/komponenter/$slug'
    | '/profil/farger'
    | '/profil/ikoner'
    | '/komponenter'
    | '/profil'
  id:
    | '__root__'
    | '/_docs'
    | '/_docs/$slug'
    | '/api/health'
    | '/studio/$'
    | '/_docs/'
    | '/_docs/komponenter/$slug'
    | '/_docs/profil/farger'
    | '/_docs/profil/ikoner'
    | '/_docs/komponenter/'
    | '/_docs/profil/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DocsRoute: typeof DocsRouteWithChildren
  ApiHealthRoute: typeof ApiHealthRoute
  StudioSplatRoute: typeof StudioSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_docs': {
      id: '/_docs'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DocsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_docs/': {
      id: '/_docs/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof DocsIndexRouteImport
      parentRoute: typeof DocsRoute
    }
    '/studio/$': {
      id: '/studio/$'
      path: '/studio/$'
      fullPath: '/studio/$'
      preLoaderRoute: typeof StudioSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/health': {
      id: '/api/health'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_docs/$slug': {
      id: '/_docs/$slug'
      path: '/$slug'
      fullPath: '/$slug'
      preLoaderRoute: typeof DocsSlugRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/profil/': {
      id: '/_docs/profil/'
      path: '/profil'
      fullPath: '/profil'
      preLoaderRoute: typeof DocsProfilIndexRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/komponenter/': {
      id: '/_docs/komponenter/'
      path: '/komponenter'
      fullPath: '/komponenter'
      preLoaderRoute: typeof DocsKomponenterIndexRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/profil/ikoner': {
      id: '/_docs/profil/ikoner'
      path: '/profil/ikoner'
      fullPath: '/profil/ikoner'
      preLoaderRoute: typeof DocsProfilIkonerRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/profil/farger': {
      id: '/_docs/profil/farger'
      path: '/profil/farger'
      fullPath: '/profil/farger'
      preLoaderRoute: typeof DocsProfilFargerRouteImport
      parentRoute: typeof DocsRoute
    }
    '/_docs/komponenter/$slug': {
      id: '/_docs/komponenter/$slug'
      path: '/komponenter/$slug'
      fullPath: '/komponenter/$slug'
      preLoaderRoute: typeof DocsKomponenterSlugRouteImport
      parentRoute: typeof DocsRoute
    }
  }
}

interface DocsRouteChildren {
  DocsSlugRoute: typeof DocsSlugRoute
  DocsIndexRoute: typeof DocsIndexRoute
  DocsKomponenterSlugRoute: typeof DocsKomponenterSlugRoute
  DocsProfilFargerRoute: typeof DocsProfilFargerRoute
  DocsProfilIkonerRoute: typeof DocsProfilIkonerRoute
  DocsKomponenterIndexRoute: typeof DocsKomponenterIndexRoute
  DocsProfilIndexRoute: typeof DocsProfilIndexRoute
}

const DocsRouteChildren: DocsRouteChildren = {
  DocsSlugRoute: DocsSlugRoute,
  DocsIndexRoute: DocsIndexRoute,
  DocsKomponenterSlugRoute: DocsKomponenterSlugRoute,
  DocsProfilFargerRoute: DocsProfilFargerRoute,
  DocsProfilIkonerRoute: DocsProfilIkonerRoute,
  DocsKomponenterIndexRoute: DocsKomponenterIndexRoute,
  DocsProfilIndexRoute: DocsProfilIndexRoute,
}

const DocsRouteWithChildren = DocsRoute._addFileChildren(DocsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  DocsRoute: DocsRouteWithChildren,
  ApiHealthRoute: ApiHealthRoute,
  StudioSplatRoute: StudioSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
