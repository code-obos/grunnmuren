{"version":3,"file":"ButtonColorContext-439c48c0.js","sources":["../../src/Button/Button.tsx","../../src/Button/ButtonColorContext.ts"],"sourcesContent":["import React, {\n  isValidElement,\n  Children,\n  forwardRef,\n  Ref,\n  useContext,\n  cloneElement,\n} from 'react';\nimport { LoadingSpinner } from '@obosbbl/grunnmuren-icons';\nimport { cx } from '@/utils';\nimport { ButtonColorContext } from '.';\n\nexport type ButtonColor = 'standard' | 'white' | 'light-green' | 'mint';\n\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n  children: React.ReactNode;\n  className?: string;\n  color?: 'standard' | 'white' | 'light-green' | 'mint';\n  disabled?: boolean;\n  href?: string;\n  /** Renders the button in a loading state */\n  loading?: boolean;\n  /** @default button */\n  type?: 'button' | 'submit' | 'reset';\n  /** @default primary */\n  variant?: 'primary' | 'secondary';\n}\n\nconst buttonVariations = {\n  'standard-primary': 'bg-green border-green text-white',\n  'standard-secondary': 'bg-white border-green text-black',\n  'mint-primary': 'bg-mint border-mint text-black',\n  'mint-secondary': 'bg-transparent border-mint text-mint',\n  'white-primary': 'bg-white border-white text-black',\n  'white-secondary': 'bg-transparent border-white text-white',\n  'light-green-primary': 'bg-green-light border-green-light text-black',\n  'light-green-secondary': 'bg-transparent border-green-light text-green-light',\n} as const;\n\nexport const Button = forwardRef<\n  HTMLButtonElement | HTMLAnchorElement,\n  ButtonProps\n>((props, ref) => {\n  const {\n    children: childrenFromProp,\n    className,\n    color: colorFromProp,\n    href,\n    loading,\n    type = 'button',\n    variant = 'primary',\n    ...rest\n  } = props;\n\n  const colorFromContext = useContext(ButtonColorContext);\n\n  const color = colorFromProp ?? colorFromContext;\n\n  const buttonVariation = buttonVariations[`${color}-${variant}`];\n\n  const classes = cx(className, buttonVariation, 'button');\n\n  const children = loading ? (\n    <Loader>{childrenFromProp}</Loader>\n  ) : (\n    childrenFromProp\n  );\n\n  return (\n    <>\n      {href /* @ts-expect-error Find a solutions later but not necessary now */ ? (\n        <a\n          aria-busy={loading ? true : undefined}\n          {...rest}\n          href={href}\n          ref={ref as Ref<HTMLAnchorElement>}\n          className={classes}\n        >\n          {children}\n        </a>\n      ) : (\n        <button\n          aria-busy={loading ? true : undefined}\n          {...rest}\n          type={type}\n          ref={ref as Ref<HTMLButtonElement>}\n          className={classes}\n        >\n          {children}\n        </button>\n      )}\n    </>\n  );\n});\n\n/**\n * Creates a loading indicator overlay in the button. This is really hackish so an explainer is necessary.\n *\n * We don't want the button size to change when we're showing the loading indicator, so we must still \"render\"\n * the regular content, even though we don't want it to be visible. Some of the button variations have transparent\n * backgrounds, so we can't just set a bg color for the loading overlay either...\n *\n * As a workaround, we hide all the button's children (except the loader) using visibility: hidden, so it\n * still takes space in the dom, and is accessible for screen readers.\n *\n * Children are deeply traversed to ensure that text nodes have a wrapper that can be targed by the visibility hidden rule\n *\n *\n */\nconst Loader = (props: { children: React.ReactNode }) => {\n  return (\n    <>\n      {deeplyWrapStrings(props.children)}\n      <span\n        // Notice the important modifier to visible here: we want it to escape the visibility hidden applied to the buttons children\n        className=\"!visible absolute bottom-1 left-1 right-1 top-1 grid place-items-center overflow-hidden bg-inherit\"\n        aria-hidden\n      >\n        <LoadingSpinner className=\"animate-spin\" />\n      </span>\n    </>\n  );\n};\n\n/**\n * Recurse children to wrap strings with spans so they're targeted by the visibility hidden rule\n */\nfunction deeplyWrapStrings(children: React.ReactNode): React.ReactNode {\n  return Children.map(children, (child) => {\n    if (!isValidElement(child)) {\n      return typeof child === 'string' ? <span>{child}</span> : child;\n    }\n\n    if (child.props.children) {\n      const props = {\n        children: deeplyWrapStrings(child.props.children),\n      };\n      child = cloneElement(child, props);\n    }\n\n    return child;\n  });\n}\n","import { createContext } from 'react';\nimport type { ButtonColor } from '.';\n\nexport const ButtonColorContext = createContext<ButtonColor>('standard');\n"],"names":["buttonVariations","Button","forwardRef","props","ref","childrenFromProp","className","colorFromProp","href","loading","type","variant","rest","colorFromContext","useContext","ButtonColorContext","buttonVariation","classes","cx","children","jsx","Loader","Fragment","jsxs","deeplyWrapStrings","LoadingSpinner","Children","child","isValidElement","cloneElement","createContext"],"mappings":";qKA4BA,MAAAA,EAAA,CAAyB,mBAAA,mCACH,qBAAA,mCACE,eAAA,iCACN,iBAAA,uCACE,gBAAA,mCACD,kBAAA,yCACE,sBAAA,+CACI,wBAAA,oDAEzB,EAEOC,EAAAC,EAAA,WAAA,CAAAC,EAAAC,IAAA,CAIL,KAAA,CAAM,SAAAC,EACM,UAAAC,EACV,MAAAC,EACO,KAAAC,EACP,QAAAC,EACA,KAAAC,EAAA,SACO,QAAAC,EAAA,UACG,GAAAC,CACP,EAAAT,EAGLU,EAAAC,aAAAC,CAAA,EAIAC,EAAAhB,EAAA,GAFAO,GAAAM,CAEA,IAAAF,CAAA,EAAA,EAEAM,EAAAC,EAAAZ,EAAAU,EAAA,QAAA,EAEAG,EAAAV,EAAAW,MAAAC,EAAA,CAAA,SAAAhB,EAAA,EAAAA,EAMA,OAAAe,EAAA,IAAAE,EAAA,SAAA,CAAA,SAAAd,EAAAY,EAAA,IAGM,IAAC,CAAA,YAAAX,EAAA,GAAA,OAC6B,GAAAG,EACxB,KAAAJ,EACJ,IAAAJ,EACA,UAAAa,EACW,SAAAE,CAEV,CAAA,EAAAC,EAAA,IAGH,SAAC,CAAA,YAAAX,EAAA,GAAA,OAC6B,GAAAG,EACxB,KAAAF,EACJ,IAAAN,EACA,UAAAa,EACW,SAAAE,CAEV,CAAA,CAAA,CAAA,CAKX,CAAA,EAgBAE,EAAAlB,GACEoB,EAAA,KAAAD,WAAA,CAAA,SAAA,CAEKE,EAAArB,EAAA,QAAA,EAAgCiB,EAAA,IACjC,OAAC,CAAA,UAAA,qGAEW,cAAA,GACC,SAAAA,EAAAA,IAAAK,EAAA,CAAA,UAAA,cAAA,CAAA,CAE8B,CAAA,CAC3C,CAAA,CAAA,EAQN,SAAAD,EAAAL,EAAA,CACE,OAAAO,WAAA,IAAAP,EAAAQ,GAAA,CACE,GAAA,CAAAC,EAAAA,eAAAD,CAAA,EACE,OAAA,OAAAA,GAAA,SAAAP,MAAA,OAAA,CAAA,SAAAO,EAAA,EAAAA,EAGF,GAAAA,EAAA,MAAA,SAAA,CACE,MAAAxB,EAAA,CAAc,SAAAqB,EAAAG,EAAA,MAAA,QAAA,CACoC,EAElDA,EAAAE,EAAA,aAAAF,EAAAxB,CAAA,CAAiC,CAGnC,OAAAwB,CAAO,CAAA,CAEX,u9BC3Ia,MAAAZ,EAAqBe,gBAA2B,UAAU"}